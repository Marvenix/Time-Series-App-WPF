//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BiosigLibWin64 {

public class Biosig {
  public static long imaxabs(long n) {
    long ret = biosigPINVOKE.imaxabs(n);
    return ret;
  }

  public static imaxdiv_t imaxdiv(long numer, long denom) {
    imaxdiv_t ret = new imaxdiv_t(biosigPINVOKE.imaxdiv(numer, denom), true);
    return ret;
  }

  public static long strtoimax(string nptr, SWIGTYPE_p_p_char endptr, int base_) {
    long ret = biosigPINVOKE.strtoimax(nptr, SWIGTYPE_p_p_char.getCPtr(endptr), base_);
    return ret;
  }

  public static ulong strtoumax(string nptr, SWIGTYPE_p_p_char endptr, int base_) {
    ulong ret = biosigPINVOKE.strtoumax(nptr, SWIGTYPE_p_p_char.getCPtr(endptr), base_);
    return ret;
  }

  public static HDRTYPE constructHDR(uint NS, uint N_EVENT) {
    global::System.IntPtr cPtr = biosigPINVOKE.constructHDR(NS, N_EVENT);
    HDRTYPE ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDRTYPE(cPtr, false);
    return ret;
  }

  public static void destructHDR(HDRTYPE hdr) {
    biosigPINVOKE.destructHDR(HDRTYPE.getCPtr(hdr));
  }

  public static HDRTYPE sopen(string FileName, string MODE, HDRTYPE hdr) {
    global::System.IntPtr cPtr = biosigPINVOKE.sopen(FileName, MODE, HDRTYPE.getCPtr(hdr));
    HDRTYPE ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDRTYPE(cPtr, false);
    return ret;
  }

  public static int sclose(HDRTYPE hdr) {
    int ret = biosigPINVOKE.sclose(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static uint sread(double[] data, uint start, uint length, HDRTYPE hdr) {
    uint ret = biosigPINVOKE.sread(data, start, length, HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static uint swrite(double[] data, uint nelem, HDRTYPE hdr) {
    uint ret = biosigPINVOKE.swrite(data, nelem, HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static int seof(HDRTYPE hdr) {
    int ret = biosigPINVOKE.seof(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static void srewind(HDRTYPE hdr) {
    biosigPINVOKE.srewind(HDRTYPE.getCPtr(hdr));
  }

  public static int sseek(HDRTYPE hdr, int offset, int whence) {
    int ret = biosigPINVOKE.sseek(HDRTYPE.getCPtr(hdr), offset, whence);
    return ret;
  }

  public static int stell(HDRTYPE hdr) {
    int ret = biosigPINVOKE.stell(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static int serror2(HDRTYPE hdr) {
    int ret = biosigPINVOKE.serror2(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static int biosig_check_error(HDRTYPE hdr) {
    int ret = biosigPINVOKE.biosig_check_error(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static string biosig_get_errormsg(HDRTYPE hdr) {
    string ret = biosigPINVOKE.biosig_get_errormsg(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static int RerefCHANNEL(HDRTYPE hdr, SWIGTYPE_p_void ReRef, char rrtype) {
    int ret = biosigPINVOKE.RerefCHANNEL(HDRTYPE.getCPtr(hdr), SWIGTYPE_p_void.getCPtr(ReRef), rrtype);
    return ret;
  }

  public static string GetFileTypeString(FileFormat FMT) {
    string ret = biosigPINVOKE.GetFileTypeString((int)FMT);
    return ret;
  }

  public static ushort PhysDimCode(string PhysDim0) {
    ushort ret = biosigPINVOKE.PhysDimCode(PhysDim0);
    return ret;
  }

  public static string PhysDim3(ushort PhysDimCode) {
    string ret = biosigPINVOKE.PhysDim3(PhysDimCode);
    return ret;
  }

  public static double PhysDimScale(ushort PhysDimCode) {
    double ret = biosigPINVOKE.PhysDimScale(PhysDimCode);
    return ret;
  }

  public static int biosig_get_number_of_channels(HDRTYPE hdr) {
    int ret = biosigPINVOKE.biosig_get_number_of_channels(HDRTYPE.getCPtr(hdr));
    return ret;
  }

  public static CHANNEL_TYPE biosig_get_channel(HDRTYPE hdr, int M) {
    global::System.IntPtr cPtr = biosigPINVOKE.biosig_get_channel(HDRTYPE.getCPtr(hdr), M);
    CHANNEL_TYPE ret = (cPtr == global::System.IntPtr.Zero) ? null : new CHANNEL_TYPE(cPtr, false);
    return ret;
  }

  public static readonly int BIOSIG_VERSION_MAJOR = biosigPINVOKE.BIOSIG_VERSION_MAJOR_get();
  public static readonly int BIOSIG_VERSION_MINOR = biosigPINVOKE.BIOSIG_VERSION_MINOR_get();
  public static readonly int BIOSIG_PATCHLEVEL = biosigPINVOKE.BIOSIG_PATCHLEVEL_get();
  public static readonly int BIOSIG_VERSION_STEPPING = biosigPINVOKE.BIOSIG_VERSION_STEPPING_get();
  public static readonly int BIOSIG_VERSION = biosigPINVOKE.BIOSIG_VERSION_get();
  public static readonly int MAX_LENGTH_LABEL = biosigPINVOKE.MAX_LENGTH_LABEL_get();
  public static readonly int MAX_LENGTH_TRANSDUCER = biosigPINVOKE.MAX_LENGTH_TRANSDUCER_get();
  public static readonly int MAX_LENGTH_PID = biosigPINVOKE.MAX_LENGTH_PID_get();
  public static readonly int MAX_LENGTH_RID = biosigPINVOKE.MAX_LENGTH_RID_get();
  public static readonly int MAX_LENGTH_NAME = biosigPINVOKE.MAX_LENGTH_NAME_get();
  public static readonly int MAX_LENGTH_MANUF = biosigPINVOKE.MAX_LENGTH_MANUF_get();
  public static readonly int MAX_LENGTH_TECHNICIAN = biosigPINVOKE.MAX_LENGTH_TECHNICIAN_get();
}

}
