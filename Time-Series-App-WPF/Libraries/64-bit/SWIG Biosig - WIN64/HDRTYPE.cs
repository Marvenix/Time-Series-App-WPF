//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BiosigLibWin64 {

public class HDRTYPE : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HDRTYPE(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HDRTYPE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HDRTYPE() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          biosigPINVOKE.delete_HDRTYPE(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string FileName {
    set {
      biosigPINVOKE.HDRTYPE_FileName_set(swigCPtr, value);
    } 
    get {
      string ret = biosigPINVOKE.HDRTYPE_FileName_get(swigCPtr);
      return ret;
    } 
  }

  public float VERSION {
    set {
      biosigPINVOKE.HDRTYPE_VERSION_set(swigCPtr, value);
    } 
    get {
      float ret = biosigPINVOKE.HDRTYPE_VERSION_get(swigCPtr);
      return ret;
    } 
  }

  public float Version {
    set {
      biosigPINVOKE.HDRTYPE_Version_set(swigCPtr, value);
    } 
    get {
      float ret = biosigPINVOKE.HDRTYPE_Version_get(swigCPtr);
      return ret;
    } 
  }

  public FileFormat TYPE {
    set {
      biosigPINVOKE.HDRTYPE_TYPE_set(swigCPtr, (int)value);
    } 
    get {
      FileFormat ret = (FileFormat)biosigPINVOKE.HDRTYPE_TYPE_get(swigCPtr);
      return ret;
    } 
  }

  public FileFormat Type {
    set {
      biosigPINVOKE.HDRTYPE_Type_set(swigCPtr, (int)value);
    } 
    get {
      FileFormat ret = (FileFormat)biosigPINVOKE.HDRTYPE_Type_get(swigCPtr);
      return ret;
    } 
  }

  public HDR_STRUCT_data data {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_data_get(swigCPtr);
      HDR_STRUCT_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_data(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char IPaddr {
    set {
      biosigPINVOKE.HDRTYPE_IPaddr_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_IPaddr_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public double SampleRate {
    set {
      biosigPINVOKE.HDRTYPE_SampleRate_set(swigCPtr, value);
    } 
    get {
      double ret = biosigPINVOKE.HDRTYPE_SampleRate_get(swigCPtr);
      return ret;
    } 
  }

  public long NRec {
    set {
      biosigPINVOKE.HDRTYPE_NRec_set(swigCPtr, value);
    } 
    get {
      long ret = biosigPINVOKE.HDRTYPE_NRec_get(swigCPtr);
      return ret;
    } 
  }

  public long T0 {
    set {
      biosigPINVOKE.HDRTYPE_T0_set(swigCPtr, value);
    } 
    get {
      long ret = biosigPINVOKE.HDRTYPE_T0_get(swigCPtr);
      return ret;
    } 
  }

  public uint HeadLen {
    set {
      biosigPINVOKE.HDRTYPE_HeadLen_set(swigCPtr, value);
    } 
    get {
      uint ret = biosigPINVOKE.HDRTYPE_HeadLen_get(swigCPtr);
      return ret;
    } 
  }

  public uint SPR {
    set {
      biosigPINVOKE.HDRTYPE_SPR_set(swigCPtr, value);
    } 
    get {
      uint ret = biosigPINVOKE.HDRTYPE_SPR_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int LOC {
    set {
      biosigPINVOKE.HDRTYPE_LOC_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_LOC_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public ushort NS {
    set {
      biosigPINVOKE.HDRTYPE_NS_set(swigCPtr, value);
    } 
    get {
      ushort ret = biosigPINVOKE.HDRTYPE_NS_get(swigCPtr);
      return ret;
    } 
  }

  public short tzmin {
    set {
      biosigPINVOKE.HDRTYPE_tzmin_set(swigCPtr, value);
    } 
    get {
      short ret = biosigPINVOKE.HDRTYPE_tzmin_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void Calib {
    set {
      biosigPINVOKE.HDRTYPE_Calib_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_Calib_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public CHANNEL_TYPE rerefCHANNEL {
    set {
      biosigPINVOKE.HDRTYPE_rerefCHANNEL_set(swigCPtr, CHANNEL_TYPE.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_rerefCHANNEL_get(swigCPtr);
      CHANNEL_TYPE ret = (cPtr == global::System.IntPtr.Zero) ? null : new CHANNEL_TYPE(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_Patient Patient {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_Patient_get(swigCPtr);
      HDR_STRUCT_Patient ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_Patient(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_ID ID {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_ID_get(swigCPtr);
      HDR_STRUCT_ID ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_ID(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_ELEC ELEC {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_ELEC_get(swigCPtr);
      HDR_STRUCT_ELEC ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_ELEC(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_EVENT EVENT {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_EVENT_get(swigCPtr);
      HDR_STRUCT_EVENT ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_EVENT(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_FLAG FLAG {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_FLAG_get(swigCPtr);
      HDR_STRUCT_FLAG ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_FLAG(cPtr, false);
      return ret;
    } 
  }

  public CHANNEL_TYPE CHANNEL {
    set {
      biosigPINVOKE.HDRTYPE_CHANNEL_set(swigCPtr, CHANNEL_TYPE.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_CHANNEL_get(swigCPtr);
      CHANNEL_TYPE ret = (cPtr == global::System.IntPtr.Zero) ? null : new CHANNEL_TYPE(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_FILE FILE {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_FILE_get(swigCPtr);
      HDR_STRUCT_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_FILE(cPtr, false);
      return ret;
    } 
  }

  public HDR_STRUCT_AS AS {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_AS_get(swigCPtr);
      HDR_STRUCT_AS ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_AS(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void aECG {
    set {
      biosigPINVOKE.HDRTYPE_aECG_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_aECG_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public ulong viewtime {
    set {
      biosigPINVOKE.HDRTYPE_viewtime_set(swigCPtr, value);
    } 
    get {
      ulong ret = biosigPINVOKE.HDRTYPE_viewtime_get(swigCPtr);
      return ret;
    } 
  }

  public HDR_STRUCT_SCP SCP {
    get {
      global::System.IntPtr cPtr = biosigPINVOKE.HDRTYPE_SCP_get(swigCPtr);
      HDR_STRUCT_SCP ret = (cPtr == global::System.IntPtr.Zero) ? null : new HDR_STRUCT_SCP(cPtr, false);
      return ret;
    } 
  }

  public HDRTYPE() : this(biosigPINVOKE.new_HDRTYPE(), true) {
  }

}

}
